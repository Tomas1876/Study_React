let Joi,User;_db9‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_db9‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_db9‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);//회원 인증 API 만들기!



//화원가입
       const register = async ctx =>{
    //Request Body 검증하기
    const schema = Joi.object().keys({
        username: Joi.string()
                        .alphanum()
                        .min(3)
                        .max(20)
                        .required(),
        password : Joi.string().required()
    });
    const result = schema.validate(ctx.request.body);
    if(result.error){
        ctx.status = 400;
        ctx.body = result.error;
        return;
    }

    const {username, password} = ctx.request.body;
    try{
        //username이 이미 존재하는지 확인
        const exists = await User.findByUsername(username);
        if(exists){
            ctx.status = 400;
            return;
        }

        //위에서 리턴되지 않았다면 유저 생성
        const user = new User({
            username
        })
        await user.setPassword(password);
        await user.save(); //데이터베이스에 저장

        //응답할 데이터에서 hashedPassword 필드 제거
        ctx.body = user.serialize();
        
    } catch(e){
        ctx.throw(500, e)
    }
}
//로그인
       const login = async ctx =>{

}
//로그인 상태 확인
       const check = async ctx =>{

}
//로그아웃
       const logout = async ctx =>{

}